name: Common workflow to run on pull requests to development branch

on:
  workflow_call:

jobs:
  prepare-merge2development:
    runs-on: ubuntu-latest

    environment: 'DEV'

    steps:
    #checkout the source code from the git repo
    - uses: actions/checkout@v3

    #caches maven dependencies
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    #setup java 1.8
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'

    #create settings.xml file with the connected app credentials
    - name: Create settings.xml
      uses: whelk-io/maven-settings-xml-action@v21
      with:
        servers: >
          [
            {
              "id": "MuleRepository",
              "username": "${{ secrets.NEXUS_USERNAME }}",
              "password": "${{ secrets.NEXUS_PASSWORD }}"

            },
            {
              "id": "anypoint-exchange-v3",
              "username": "~~~Client~~~",
              "password": "${{ secrets.CA_CLIENTID }}~?~${{ secrets.CA_CLIENTSECRET }}"

            }
          ]
        repositories: >
          [
            {
              "id": "MuleRepository",
              "name": "Mule Repository",
              "url": "https://repository.mulesoft.org/nexus-ee/content/repositories/releases-ee/",
              "releases": {
                "enabled": "true"
              },
              "snapshots": {
                "enabled": "false"
              }
            }
          ]

    #execute MUnit tests
    - name: MUnit Test
      run: |
        mvn clean test -Dmule.env=${{ vars.ENV }} -Dmule.encryption.key=${{ secrets.ENCRYPTION_KEY }}
    
    #extract asset parameters from pom.xml. only if PR is from a feature branch
    - name: Extract asset parameters
      if: ${{ contains(github.head_ref, 'feature/') }}
      run: |
        groupId=`mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout`
        echo "assetGroup=$groupId" >> "$GITHUB_ENV"
        assetId=`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`
        echo "assetId=$assetId" >> "$GITHUB_ENV"
        version=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        echo "assetVersion=$version" >> "$GITHUB_ENV"
        echo "group = $groupId, assetId = $assetId, version = $version"

    #check if asset already exists in Exchange. only if PR is from a feature branch
    - name: Check if asset exists
      if: ${{ contains(github.head_ref, 'feature/') }}
      run: |
        token=`curl -sb --location --request POST 'https://eu1.anypoint.mulesoft.com/accounts/api/v2/oauth2/token' --header 'Content-Type: application/json' --data-raw '{"client_id": "${{ secrets.CA_CLIENTID }}", "client_secret": "${{ secrets.CA_CLIENTSECRET }}", "grant_type": "client_credentials"}' | jq -j '.access_token'`
        asset=`curl -sb --location --request POST 'https://eu1.anypoint.mulesoft.com/graph/api/v1/graphql' --header 'Content-Type: application/json' --header "Authorization: Bearer $token" --data-raw '{"query": "{assets(asset:{groupId:\"${{ env.assetGroup }}\", assetId:\"${{ env.assetId }}\", version:\"${{ env.assetVersion }}\"}){assetId version type}}"}'`
        echo "response = $asset"
        echo "assetresponse=$asset" >> "$GITHUB_ENV"

    #Throw an error if the asset already exists in Exchange. only if PR is from a feature branch
    - name: Throw error if asset exists
      if: ${{ contains(github.head_ref, 'feature/') && contains(env.assetresponse, 'assetId') }}
      run: |
        echo "::error file=pom.xml::Version already exists in Exchange. Please increase the version"
        exit 1
