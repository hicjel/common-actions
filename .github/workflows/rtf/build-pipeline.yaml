name: Common build workflow for RTF

on:
  workflow_call:
    inputs:
      rtf_cpu_dev:
        required: false
        description: set value for RTF deployment properties Reserved and Limit CPU for dev
        type: string
      rtf_memory_dev:
        required: false
        description: set value for RTF deployment property Memory for dev
        type: string
      rtf_replicas_dev:
        required: false
        description: set value for RTF deployment property Replica Count for dev
        type: string
      rtf_cpu_uat:
        required: false
        description: set value for RTF deployment properties Reserved and Limit CPU for uat
        type: string
      rtf_memory_uat:
        required: false
        description: set value for RTF deployment property Memory for uat
        type: string
      rtf_replicas_uat:
        required: false
        description: set value for RTF deployment property Replica Count for uat
        type: string
      rtf_cpu_prod:
        required: false
        description: set value for RTF deployment properties Reserved and Limit CPU for prod
        type: string
      rtf_memory_prod:
        required: false
        description: set value for RTF deployment property Memory for prod
        type: string
      rtf_replicas_prod:
        required: false
        description: set value for RTF deployment property Replica Count for prod
        type: string

jobs:
  set-envrionment:
    runs-on: ubuntu-latest
    outputs:
      gh-env: ${{ steps.set-env.outputs.env-name }}
    steps:
    #set environment
    - name: Set env
      id: set-env
      run: |
        if [[ ${{ github.ref_name }} == 'development' ]]; then
          echo "env-name=dev" >> "$GITHUB_OUTPUT"
        elif [[ ${{ github.ref_name }} == 'production' ]]; then
            echo "env-name=prod" >> "$GITHUB_OUTPUT"
        elif [[ ${{ github.ref_name }} == 'release/'* ]]; then
            echo "env-name=uat" >> "$GITHUB_OUTPUT"
        else
          echo "env-name=unknown" >> "$GITHUB_OUTPUT"
        fi


  build:
    needs: [set-envrionment]    
    runs-on: ubuntu-latest
    environment: ${{ needs.set-envrionment.outputs.gh-env }}

    steps:
    #checkout the source code from the git repo
    - uses: actions/checkout@v3

    #caches maven dependencies
    - uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    #setup java 1.8
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '8'

    #extract asset parameters from pom.xml
    - name: Extract asset parameters
      run: |
        groupId=`mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout`
        echo "assetGroup=$groupId" >> "$GITHUB_ENV"
        assetId=`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`
        echo "assetId=$assetId" >> "$GITHUB_ENV"
        version=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`
        echo "assetVersion=$version" >> "$GITHUB_ENV"
        echo "group = $groupId, assetId = $assetId, version = $version"

    #check if asset already exists in Exchange
    - name: Check if asset exists
      run: |
        token=`curl -sb --location --request POST 'https://eu1.anypoint.mulesoft.com/accounts/api/v2/oauth2/token' --header 'Content-Type: application/json' --data-raw '{"client_id": "${{ secrets.CA_CLIENTID }}", "client_secret": "${{ secrets.CA_CLIENTSECRET }}", "grant_type": "client_credentials"}' | jq -j '.access_token'`
        asset=`curl -sb --location --request POST 'https://eu1.anypoint.mulesoft.com/graph/api/v1/graphql' --header 'Content-Type: application/json' --header "Authorization: Bearer $token" --data-raw '{"query": "{assets(asset:{groupId:\"${{ env.assetGroup }}\", assetId:\"${{ env.assetId }}\", version:\"${{ env.assetVersion }}\"}){assetId version type}}"}'`
        echo "response = $asset"
        echo "assetresponse=$asset" >> "$GITHUB_ENV"

    #create settings.xml file with the connected app credentials
    - name: Create settings.xml
      uses: whelk-io/maven-settings-xml-action@v21
      if: ${{ !contains(env.assetresponse, 'assetId') }}
      with:
        servers: >
          [
            {
              "id": "AP-Repository",
              "username": "~~~Client~~~",
              "password": "${{ secrets.CA_CLIENTID }}~?~${{ secrets.CA_CLIENTSECRET }}"

            },
            {
              "id": "anypoint-exchange-v3",
              "username": "~~~Client~~~",
              "password": "${{ secrets.CA_CLIENTID }}~?~${{ secrets.CA_CLIENTSECRET }}"

            }
          ]

    #print a warning message if the asset already exists in Exchange
    - name: Print warning message
      if: ${{ github.ref_name == 'development' && contains(env.assetresponse, 'assetId') }}
      run: |
        echo "::warning file=pom.xml::Please be aware that you are deploying an existing version from Exchange!"

    #build a jar file and publish it to Exchange
    - name: Publish to Exchange
      if: ${{ !contains(env.assetresponse, 'assetId') }}
      run: |
        mvn deploy -DskipTests
  
  deploy-dev:
    needs: [build]
    if: ${{ github.ref_name == 'development' }}
    uses: ./.github/workflows/rtf/deploy-stage.yaml
    with:
      environment: dev
      in_rtf_cpu: ${{ inputs.rtf_cpu_dev }} 
      in_rtf_memory: ${{ inputs.rtf_memory_dev }}
      in_rtf_replicas: ${{ inputs.rtf_replicas_dev }}
    secrets: inherit
  
  deploy-uat:
    needs: [build]
    if: ${{ contains(github.ref_name, 'release') }}
    uses: ./.github/workflows/rtf/deploy-stage.yaml
    with:
      environment: uat
      in_rtf_cpu: ${{ inputs.rtf_cpu_uat }} 
      in_rtf_memory: ${{ inputs.rtf_memory_uat }}
      in_rtf_replicas: ${{ inputs.rtf_replicas_uat }}
    secrets: inherit
  
  deploy-prod:
    needs: [build]
    if: ${{ github.ref_name == 'production' }}
    uses: ./.github/workflows/rtf/deploy-stage.yaml
    with:
      environment: prod
      in_rtf_cpu: ${{ inputs.rtf_cpu_prod }} 
      in_rtf_memory: ${{ inputs.rtf_memory_prod }}
      in_rtf_replicas: ${{ inputs.rtf_replicas_prod }}
    secrets: inherit
